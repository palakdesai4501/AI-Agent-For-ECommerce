# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        tags: typing.Optional[typing.Dict[str, str]] = None,
        on_tick: typing.Optional[typing.Callable[[str, baml_py.baml_py.FunctionLog], None]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        if tags is not None:
            options["tags"] = tags
        if on_tick is not None:
            options["on_tick"] = on_tick
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def AnalyzeProductImage(self, image_description: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzeProductImage(image_description=image_description,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeProductImage", args={
                "image_description": image_description,
            })
            return typing.cast(str, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzeSearchIntent(self, query: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzeSearchIntent(query=query,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeSearchIntent", args={
                "query": query,
            })
            return typing.cast(str, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ClassifyUserIntent(self, user_message: str,has_image: bool,
        baml_options: BamlCallOptions = {},
    ) -> types.ConversationType:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.ClassifyUserIntent(user_message=user_message,has_image=has_image,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="ClassifyUserIntent", args={
                "user_message": user_message,"has_image": has_image,
            })
            return typing.cast(types.ConversationType, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ExplainRecommendation(self, product: str,user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.ExplainRecommendation(product=product,user_query=user_query,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="ExplainRecommendation", args={
                "product": product,"user_query": user_query,
            })
            return typing.cast(str, result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateProductRecommendations(self, query: str,similar_products: str,user_filters: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> typing.List["types.ProductRecommendation"]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.GenerateProductRecommendations(query=query,similar_products=similar_products,user_filters=user_filters,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateProductRecommendations", args={
                "query": query,"similar_products": similar_products,"user_filters": user_filters,
            })
            return typing.cast(typing.List["types.ProductRecommendation"], result.cast_to(types, types, stream_types, False, __runtime__))
    async def HandleGeneralConversation(self, user_message: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.HandleGeneralConversation(user_message=user_message,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="HandleGeneralConversation", args={
                "user_message": user_message,
            })
            return typing.cast(str, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeProductImage(self, image_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[str, str]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeProductImage", args={
            "image_description": image_description,
        })
        return baml_py.BamlStream[str, str](
          result,
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzeSearchIntent(self, query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[str, str]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeSearchIntent", args={
            "query": query,
        })
        return baml_py.BamlStream[str, str](
          result,
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ClassifyUserIntent(self, user_message: str,has_image: bool,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[types.ConversationType, types.ConversationType]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ClassifyUserIntent", args={
            "user_message": user_message,"has_image": has_image,
        })
        return baml_py.BamlStream[types.ConversationType, types.ConversationType](
          result,
          lambda x: typing.cast(types.ConversationType, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ConversationType, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExplainRecommendation(self, product: str,user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[str, str]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ExplainRecommendation", args={
            "product": product,"user_query": user_query,
        })
        return baml_py.BamlStream[str, str](
          result,
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateProductRecommendations(self, query: str,similar_products: str,user_filters: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List["stream_types.ProductRecommendation"], typing.List["types.ProductRecommendation"]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateProductRecommendations", args={
            "query": query,"similar_products": similar_products,"user_filters": user_filters,
        })
        return baml_py.BamlStream[typing.List["stream_types.ProductRecommendation"], typing.List["types.ProductRecommendation"]](
          result,
          lambda x: typing.cast(typing.List["stream_types.ProductRecommendation"], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List["types.ProductRecommendation"], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def HandleGeneralConversation(self, user_message: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[str, str]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="HandleGeneralConversation", args={
            "user_message": user_message,
        })
        return baml_py.BamlStream[str, str](
          result,
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def AnalyzeProductImage(self, image_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeProductImage", args={
            "image_description": image_description,
        }, mode="request")
        return result
    async def AnalyzeSearchIntent(self, query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeSearchIntent", args={
            "query": query,
        }, mode="request")
        return result
    async def ClassifyUserIntent(self, user_message: str,has_image: bool,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ClassifyUserIntent", args={
            "user_message": user_message,"has_image": has_image,
        }, mode="request")
        return result
    async def ExplainRecommendation(self, product: str,user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExplainRecommendation", args={
            "product": product,"user_query": user_query,
        }, mode="request")
        return result
    async def GenerateProductRecommendations(self, query: str,similar_products: str,user_filters: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateProductRecommendations", args={
            "query": query,"similar_products": similar_products,"user_filters": user_filters,
        }, mode="request")
        return result
    async def HandleGeneralConversation(self, user_message: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="HandleGeneralConversation", args={
            "user_message": user_message,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def AnalyzeProductImage(self, image_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeProductImage", args={
            "image_description": image_description,
        }, mode="stream")
        return result
    async def AnalyzeSearchIntent(self, query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeSearchIntent", args={
            "query": query,
        }, mode="stream")
        return result
    async def ClassifyUserIntent(self, user_message: str,has_image: bool,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ClassifyUserIntent", args={
            "user_message": user_message,"has_image": has_image,
        }, mode="stream")
        return result
    async def ExplainRecommendation(self, product: str,user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExplainRecommendation", args={
            "product": product,"user_query": user_query,
        }, mode="stream")
        return result
    async def GenerateProductRecommendations(self, query: str,similar_products: str,user_filters: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateProductRecommendations", args={
            "query": query,"similar_products": similar_products,"user_filters": user_filters,
        }, mode="stream")
        return result
    async def HandleGeneralConversation(self, user_message: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="HandleGeneralConversation", args={
            "user_message": user_message,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))