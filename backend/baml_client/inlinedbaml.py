# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\n// Using the new OpenAI Responses API for enhanced formatting\n\n// Example Vertex AI client (uncomment to use)\nclient<llm> Gemini {\n  provider google-ai\n  options {\n    model \"gemini-2.5-flash-lite\"\n    api_key env.GEMINI_API_KEY\n  }\n}\n\n\n",
    "ecommerce.baml": "enum ConversationType {\n  GENERAL_CONVERSATION\n  PRODUCT_RECOMMENDATION  \n  IMAGE_SEARCH\n}\n\nclass ProductRecommendation {\n  product_id string\n  title string\n  description string\n  category string\n  price float?\n  rating float?\n  relevance_score float\n  reason string\n}\n\nclass SearchFilters {\n  category string?\n  min_price float?\n  max_price float?\n  min_rating float?\n}\n\n// Unified single-entrypoint helper types\nclass UserQueryInput {\n  user_message string\n  has_image bool\n  image_description string?\n}\n\nclass AgentDirective {\n  intent ConversationType\n  // For GENERAL_CONVERSATION\n  reply string?\n  // For PRODUCT_RECOMMENDATION or IMAGE_SEARCH\n  refined_query string?\n  // Extracted filters from user query\n  min_price float?\n  max_price float?\n  min_rating float?\n  category string?\n}\n\nfunction HandleGeneralConversation(user_message: string) -> string {\n  client Gemini\n  prompt #\"\n    You are Cartly, a helpful AI shopping assistant for an e-commerce website.\n\n    User message: \"{{user_message}}\"\n\n    CATALOG CONTEXT:\n    - 250 high-quality, curated products (all rated 3.5+ stars with 50+ reviews)\n    - Main categories: Fashion (55), Health & Personal Care (35), Amazon Home (30), Pet Supplies (30), Office Products (21), Electronics (20), Sports & Outdoors (20), Computers (10), and more\n\n    RESPONSE GUIDELINES:\n    1. Be friendly, concise, and helpful (2-3 sentences max)\n    2. If asked about capabilities, mention:\n       - Text-based product search (\"Find me wireless headphones\")\n       - Image-based search (upload a photo to find similar items)\n       - Detailed product information and comparisons\n    3. If asked about categories, mention the main ones listed above\n    4. If asked about product availability, explain we have curated, high-quality products\n    5. Never fabricate product details or availability\n\n    Keep responses warm, professional, and action-oriented.\n  \"#\n}\n\nfunction AnalyzeProductImage(image_description: string) -> string {\n  client Gemini\n  prompt #\"\n    You are an e-commerce search expert. Convert this structured product description into a focused search query.\n\n    Description:\n    {{image_description}}\n\n    TASK: Create a SHORT search query (4-8 words max) optimized for finding similar products.\n\n    CRITICAL RULES:\n    1. Start with the product type (REQUIRED - e.g., \"shoes\", \"jacket\", \"headphones\")\n    2. Add target audience if clear (e.g., \"women's\", \"men's\", \"kids\")\n    3. Add 1-2 key functional features (e.g., \"athletic\", \"wireless\", \"insulated\")\n    4. SKIP specific colors, brands, and detailed materials (product catalogs often don't include these)\n    5. Use BROAD, COMMON e-commerce terms that match typical product listings\n    6. Keep queries GENERAL to maximize matches\n\n    EXAMPLES:\n    Input: \"Product Type: Running Shoes, Colors: pink coral, Target: women, Features: athletic, mesh\"\n    Output: \"women's athletic running shoes\"\n    ❌ BAD: \"women's running shoes pink coral mesh\" (too specific)\n\n    Input: \"Product Type: Jacket, Category: clothing, Colors: gray, Target: men, Features: hooded, waterproof\"\n    Output: \"men's jacket hooded waterproof\"\n    ❌ BAD: \"men's gray hooded waterproof jacket\" (color too specific)\n\n    Input: \"Product Type: Headphones, Colors: black, Features: wireless, over-ear, bluetooth\"\n    Output: \"wireless headphones over-ear\"\n    ❌ BAD: \"black wireless over-ear bluetooth headphones\" (redundant, too specific)\n\n    Input: \"Product Type: Water bottle, Features: insulated, stainless steel, Colors: blue\"\n    Output: \"insulated water bottle stainless steel\"\n    ❌ BAD: \"blue insulated stainless steel water bottle\" (color unnecessary)\n\n    Now generate the search query (favor BROAD terms over specific attributes):\n  \"#\n}\n\n\n// (Removed unused AnalyzeSearchIntent)\n\n// Single entrypoint: take one input and decide what to do.\nfunction HandleUserQuery(input: UserQueryInput) -> AgentDirective {\n  client Gemini\n  prompt #\"\n    {{ ctx.output_format }}\n\n    You are Cartly, an AI shopping assistant with a curated catalog of 250 high-quality products.\n\n    CATALOG OVERVIEW:\n    - Fashion (clothing, shoes, jewelry): 55 products\n    - Health & Personal Care: 35 products\n    - Amazon Home (furniture, bedding, kitchen): 30 products\n    - Pet Supplies: 30 products\n    - Office Products: 21 products\n    - Electronics: 20 products\n    - Sports & Outdoors: 20 products\n    - Computers: 10 products\n    - Other categories (Tools, Beauty, Video Games, etc.): 29 products\n\n    TASK: Classify user intent and generate appropriate response.\n\n    CLASSIFICATION RULES:\n    - If input.has_image is true → intent = IMAGE_SEARCH (use image_description to craft refined_query)\n    - If user asks about agent capabilities, categories, or general questions → intent = GENERAL_CONVERSATION (provide helpful reply)\n    - If user requests product recommendations or search → intent = PRODUCT_RECOMMENDATION (create refined_query)\n\n    FOR GENERAL_CONVERSATION:\n    - Provide a brief, helpful reply about Cartly's capabilities or catalog\n    - Mention relevant categories if asked\n    - Keep it friendly and concise (2-3 sentences)\n\n    FOR PRODUCT_RECOMMENDATION:\n    - Create a refined_query capturing: product type + key attributes (color, brand, style, etc.)\n    - Keep it short and semantic (5-10 words)\n    - Preserve specific constraints (e.g., \"black comforter set\", \"wireless headphones\", \"women's running shoes\")\n    - DO NOT relax constraints - let search handle \"not found\" cases\n\n    EXTRACT FILTERS (set to null if not mentioned):\n    - min_price: If query mentions \"under $X\", \"below $X\", \"less than $X\" → set max_price = X\n    - max_price: If query mentions \"over $X\", \"above $X\", \"more than $X\" → set min_price = X\n    - min_price & max_price: If \"between $X and $Y\" → set both\n    - min_rating: If mentions \"highly rated\", \"top rated\", \"4+ stars\" → set to 4.0 or 4.5\n    - category: ALWAYS SET TO NULL (semantic search handles categories automatically)\n\n    FILTER EXTRACTION EXAMPLES:\n    - \"recommend me products under $15\" → refined_query: \"products\", max_price: 15.0\n    - \"find wireless headphones under $50\" → refined_query: \"wireless headphones\", max_price: 50.0\n    - \"show me highly rated black comforter\" → refined_query: \"black comforter\", min_rating: 4.0\n    - \"office products between $10 and $20\" → refined_query: \"office products\", min_price: 10.0, max_price: 20.0, category: \"Office Products\"\n    - \"pet supplies over $30\" → refined_query: \"pet supplies\", min_price: 30.0, category: \"Pet Supplies\"\n\n    STRICT AVAILABILITY POLICY:\n    - Never fabricate or imply product availability\n    - Preserve ALL user constraints in refined_query AND extracted filters\n    - If unsure, keep query specific - better to return no results than wrong results\n\n    Input:\n    message: \"{{ input.user_message }}\"\n    has_image: {{ input.has_image }}\n    image_description: {{ input.image_description }}\n\n  \"#\n}\n\n// (Removed unused ToolSearchByText — handled by Python SearchEngine)\n\n// TOOL 2: Context-aware product recommendations (RAG)\nfunction GenerateProductRecommendations(\n  user_query: string,\n  retrieved_products: string\n) -> string {\n  client Gemini\n  prompt #\"\n    {{ ctx.output_format }}\n\n    You are Cartly, an AI shopping assistant. You've retrieved products from a curated catalog of 250 high-quality items (all rated 3.5+ stars).\n\n    User Query: \"{{user_query}}\"\n\n    Retrieved Products:\n    {{retrieved_products}}\n\n    TASK: Generate a helpful, concise response (1-2 sentences).\n\n    RESPONSE GUIDELINES:\n    1. Count the EXACT number of products in the list\n    2. If products found:\n       - \"I found [count] great option(s) for you!\" (or similar friendly phrasing)\n       - Optionally add brief context: \"Here are [count] highly-rated [product type] that match your search.\"\n       - If 3 products: mention \"top 3 matches\" or \"best matches\"\n    3. If no products found:\n       - \"I couldn't find products matching '[query]' in our catalog.\"\n       - Suggest trying broader terms or different categories\n    4. DO NOT list product details (they're shown visually below)\n    5. Keep it warm, helpful, and action-oriented\n\n    EXAMPLES:\n    - Found 3: \"I found 3 great wireless headphones for you!\"\n    - Found 1: \"I found 1 highly-rated comforter set that matches your search.\"\n    - Found 0: \"I couldn't find 'red wireless mouse' in our catalog. Try searching for 'wireless mouse' to see all available options.\"\n\n    Generate response:\n  \"#\n}\n\n// TOOL 3: Single product explanation helper\nfunction ExplainRecommendation(\n  product: string,\n  user_query: string\n) -> string {\n  client Gemini\n  prompt #\"\n    Explain why this product is a good match for the user's search.\n    USE ONLY the information present in Product. Do not assume brand, color,\n    availability, or features that are not explicitly provided.\n    If the product does not clearly satisfy key constraints in the User Query\n    (e.g., color, size, model), state that directly and avoid claiming it does.\n\n    User Query: \"{{user_query}}\"\n    Product: {{product}}\n\n    Provide a personalized explanation that highlights:\n    1. How this product meets their specific needs\n    2. Key features that make it stand out\n    3. Value proposition\n\n    Keep the explanation conversational and helpful, like a knowledgeable sales assistant.\n    Be precise and do not fabricate details beyond the provided Product fields.\n  \"#\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.209.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
}

def get_baml_files():
    return _file_map