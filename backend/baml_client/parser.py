# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

import baml_py

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeProductImage(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeProductImage", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def AnalyzeSearchIntent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeSearchIntent", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def ClassifyUserIntent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConversationType:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ClassifyUserIntent", llm_response=llm_response, mode="request")
        return typing.cast(types.ConversationType, result)

    def ExplainRecommendation(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExplainRecommendation", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def GenerateProductRecommendations(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.ProductRecommendation"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateProductRecommendations", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.ProductRecommendation"], result)

    def HandleGeneralConversation(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="HandleGeneralConversation", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeProductImage(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeProductImage", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def AnalyzeSearchIntent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeSearchIntent", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def ClassifyUserIntent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ConversationType:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ClassifyUserIntent", llm_response=llm_response, mode="stream")
        return typing.cast(types.ConversationType, result)

    def ExplainRecommendation(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExplainRecommendation", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def GenerateProductRecommendations(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.ProductRecommendation"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateProductRecommendations", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.ProductRecommendation"], result)

    def HandleGeneralConversation(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="HandleGeneralConversation", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    